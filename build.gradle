plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

jar {
    enabled = false
}

group = 'com.umc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    //메일 전송 라이브러리
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '2.5.5'
    implementation group: 'com.sun.mail', name: 'jakarta.mail', version: '2.0.1'

    //타임리프 라이브러리®
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: '2.7.12'

    //스프링 시큐리티 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //JSON Parse 라이브러리
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.google.code.gson:gson'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //Redis 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
    useJUnitPlatform()
}


def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}